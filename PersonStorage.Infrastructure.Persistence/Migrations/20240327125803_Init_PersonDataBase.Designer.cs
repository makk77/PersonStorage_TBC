// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PersonRegister.Infrastructure.Database.Persistence.Context;

#nullable disable

namespace PersonStorage.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(PersonDbContext))]
    [Migration("20240327125803_Init_PersonDataBase")]
    partial class Init_PersonDataBase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PersonStorage.Core.Domain.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Tbilisi"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Batumi"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Kutaisi"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Mtsketa"
                        });
                });

            modelBuilder.Entity("PersonStorage.Core.Domain.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("date");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PersonalNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PhotoPath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("PersonalNumber")
                        .IsUnique();

                    b.ToTable("People");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateTime(1999, 3, 27, 16, 58, 2, 129, DateTimeKind.Local).AddTicks(9792),
                            CityId = 4,
                            DateCreated = new DateTime(2024, 3, 27, 16, 58, 2, 131, DateTimeKind.Local).AddTicks(3318),
                            FirstName = "Mariam",
                            Gender = 2,
                            LastName = "Kurkumuli",
                            PersonalNumber = "00000000000"
                        },
                        new
                        {
                            Id = 2,
                            BirthDate = new DateTime(1997, 3, 27, 16, 58, 2, 131, DateTimeKind.Local).AddTicks(4354),
                            CityId = 1,
                            DateCreated = new DateTime(2024, 3, 27, 16, 58, 2, 131, DateTimeKind.Local).AddTicks(4366),
                            FirstName = "Pavle",
                            Gender = 2,
                            LastName = "Pavliashvili",
                            PersonalNumber = "11111111111"
                        },
                        new
                        {
                            Id = 3,
                            BirthDate = new DateTime(1995, 3, 27, 16, 58, 2, 131, DateTimeKind.Local).AddTicks(4373),
                            CityId = 1,
                            DateCreated = new DateTime(2024, 3, 27, 16, 58, 2, 131, DateTimeKind.Local).AddTicks(4375),
                            FirstName = "Nino",
                            Gender = 1,
                            LastName = "Ninidze",
                            PersonalNumber = "22222222222"
                        },
                        new
                        {
                            Id = 4,
                            BirthDate = new DateTime(2005, 3, 27, 16, 58, 2, 131, DateTimeKind.Local).AddTicks(4380),
                            CityId = 3,
                            DateCreated = new DateTime(2024, 3, 27, 16, 58, 2, 131, DateTimeKind.Local).AddTicks(4382),
                            FirstName = "Mariam",
                            Gender = 1,
                            LastName = "Mariamidze",
                            PersonalNumber = "33333333333"
                        });
                });

            modelBuilder.Entity("PersonStorage.Core.Domain.Models.PersonRelation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("RelatedPersonId")
                        .HasColumnType("int");

                    b.Property<int>("RelationType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("RelatedPersonId");

                    b.ToTable("PersonRelations");
                });

            modelBuilder.Entity("PersonStorage.Core.Domain.Models.Phone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("NumberType")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Phones");
                });

            modelBuilder.Entity("PersonStorage.Core.Domain.Models.Person", b =>
                {
                    b.HasOne("PersonStorage.Core.Domain.Models.City", "City")
                        .WithMany("People")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("PersonStorage.Core.Domain.Models.PersonRelation", b =>
                {
                    b.HasOne("PersonStorage.Core.Domain.Models.Person", "Person")
                        .WithMany("RelatedPeople")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PersonStorage.Core.Domain.Models.Person", "RelatedPerson")
                        .WithMany()
                        .HasForeignKey("RelatedPersonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("RelatedPerson");
                });

            modelBuilder.Entity("PersonStorage.Core.Domain.Models.Phone", b =>
                {
                    b.HasOne("PersonStorage.Core.Domain.Models.Person", "Person")
                        .WithMany("Phones")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("PersonStorage.Core.Domain.Models.City", b =>
                {
                    b.Navigation("People");
                });

            modelBuilder.Entity("PersonStorage.Core.Domain.Models.Person", b =>
                {
                    b.Navigation("Phones");

                    b.Navigation("RelatedPeople");
                });
#pragma warning restore 612, 618
        }
    }
}
